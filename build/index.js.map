{"version":3,"sources":["webpack://EvalExp/webpack/universalModuleDefinition","webpack://EvalExp/./src/CharacterAccessor.js","webpack://EvalExp/./src/tokens/BaseToken.js","webpack://EvalExp/./src/tokens/GroupToken.js","webpack://EvalExp/./src/tokens/RootToken.js","webpack://EvalExp/./src/tokens/ValueToken.js","webpack://EvalExp/./src/tokens/NumberToken.js","webpack://EvalExp/./src/tokens/VariableToken.js","webpack://EvalExp/./src/tokens/BracketToken.js","webpack://EvalExp/./src/tokens/LeftRightOperatorToken.js","webpack://EvalExp/./src/tokens/OperatorToken.js","webpack://EvalExp/./src/tokens/AdditionToken.js","webpack://EvalExp/./src/tokens/DivisionToken.js","webpack://EvalExp/./src/tokens/MultiplicationToken.js","webpack://EvalExp/./src/tokens/SubtractionToken.js","webpack://EvalExp/./src/lexer.js","webpack://EvalExp/./src/index.js","webpack://EvalExp/./src/transformer.js","webpack://EvalExp/webpack/bootstrap","webpack://EvalExp/webpack/startup","webpack://EvalExp/webpack/runtime/define property getters","webpack://EvalExp/webpack/runtime/hasOwnProperty shorthand","webpack://EvalExp/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","CharacterAccessor","rawString","this","index","charactersRegexp","replace","length","BaseToken","iterator","left","right","parent","TokenType","registeredTokenTypes","push","character","ApplicableToken","find","isApplicable","SyntaxError","addGlobalChild","getIterator","moveLeft","value","getValue","getParent","isChildAllowed","getApplicable","applicableToken","getApplicableToken","setRight","setRoot","getRoot","setLeft","setParent","addChild","parse","GroupToken","props","children","child","removeChild","filter","declarations","getChild","evaluate","RootToken","globalChildren","parseUp","ValueToken","parseLeft","NumberToken","test","nextValue","getNextValue","setValue","Number","VariableToken","variableName","variable","BracketToken","moveNext","LeftRightOperatorToken","addChildAtIndex","operand","getLeft","leftOperandSibling","setLeftChild","getRight","rightOperandSibling","setRightChild","transformLeftOperand","transformRightOperand","AdditionToken","getLeftChild","getRightChild","DivisionToken","MultiplicationToken","SubtractionToken","registerTokenType","EvalExp","rootToken","orderedOperatorTypes","tokenList","stringExpression","removeCharacters","lexer","getGlobalList","forEach","operatorType","token","transform","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EvalExp\"] = factory();\n\telse\n\t\troot[\"EvalExp\"] = factory();\n})(self, function() {\nreturn ","export default class CharacterAccessor {\n    constructor(rawString) {\n        this.rawString = rawString;\n        this.index = -1;\n    }\n\n    removeCharacters(charactersRegexp) {\n        this.rawString = this.rawString.replace(charactersRegexp, \"\");\n    }\n\n    getValue() {\n        return this.rawString[this.index];\n    }\n\n    getNextValue() {\n        return this.rawString[this.index + 1];\n    }\n\n    getPrevValue() {\n        return this.rawString[this.index - 1];\n    }\n\n    moveLeft() {\n        if (this.index + 1 >= this.rawString.length) {\n            return null;\n        } else {\n            this.index++;\n            return true;\n        }\n    }\n\n    moveRight() {\n        if (this.index - 1 < 0) {\n            return null;\n        } else {\n            this.index--;\n            return true;\n        }\n    }\n}\n","export default class BaseToken {\n    static registeredTokenTypes = [];\n\n    static registerTokenType(TokenType) {\n        BaseToken.registeredTokenTypes.push(TokenType);\n    }\n\n    static getApplicable(character) {\n        const ApplicableToken = BaseToken.registeredTokenTypes.find(TokenType =>\n            TokenType.isApplicable(character)\n        );\n        if (ApplicableToken) {\n            return ApplicableToken;\n        } else {\n            throw SyntaxError(`No applicable token type for ${character}`);\n        }\n    }\n\n    static isApplicable(character) {\n        return false;\n    }\n\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.left = null;\n        this.right = null;\n        this.parent = null;\n        this.root = null;\n    }\n\n    getIterator() {\n        return this.iterator;\n    }\n\n    setLeft(left) {\n        this.left = left;\n    }\n\n    getLeft() {\n        return this.left;\n    }\n\n    setRight(right) {\n        this.right = right;\n    }\n\n    getRight() {\n        return this.right;\n    }\n\n    setParent(parent) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    setRoot(root) {\n        this.root = root;\n        this.root.addGlobalChild(this);\n    }\n\n    getRoot() {\n        return this.root;\n    }\n\n    isChildAllowed() {\n        return true;\n    }\n\n    getApplicableToken() {\n        if (this.getIterator().moveLeft()) {\n            const value = this.getIterator().getValue();\n            if (value && (!this.getParent() || this.getParent().isChildAllowed())) {\n                const ApplicableTokenType = BaseToken.getApplicable(value);\n                const applicableToken = new ApplicableTokenType(this.getIterator());\n                return applicableToken;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    parseLeft() {\n        const applicableToken = this.getApplicableToken();\n        if(applicableToken) {\n            this.setRight(applicableToken);\n            applicableToken.setRoot(this.getRoot());\n            applicableToken.setLeft(this);\n            applicableToken.setParent(this.getParent());\n            this.getParent().addChild(applicableToken);\n            applicableToken.parse();\n        }\n    }\n\n    parse() {}\n\n    evaluate() {}\n}\n","import BaseToken from \"./BaseToken\";\n\n\nexport default class GroupToken extends BaseToken{\n    constructor(props) {\n        super(props);\n        this.children = [];\n    }\n\n    addChild(child) {\n        this.children.push(child);\n    }\n\n    removeChild(removeChild) {\n        this.children = this.children.filter(child => child !== removeChild);\n    }\n\n    addChildAtIndex(child, index) {\n        this.children[index] = child;\n    }\n\n    getChild(index) {\n        return this.children[index];\n    }\n\n    parseUp() {\n        const applicableToken = this.getApplicableToken();\n        if(applicableToken) {\n            this.addChild(applicableToken);\n            applicableToken.setRoot(this.getRoot());\n            applicableToken.setParent(this);\n            applicableToken.parse();\n        }\n    }\n\n    evaluate(declarations) {\n        return this.getChild(0).evaluate(declarations);\n    }\n}","import GroupToken from \"./GroupToken\";\n\n\nexport default class RootToken extends GroupToken {\n\n    constructor(iterator) {\n        super(iterator);\n        this.globalChildren = [];\n        this.setRoot(this);\n    }\n\n    setRoot(root) {\n        this.root = root;\n    }\n\n    addGlobalChild(child) {\n        this.globalChildren.push(child);\n    }\n\n    getGlobalList(index) {\n        return this.globalChildren;\n    }\n\n    parse() {\n        this.parseUp();\n    }\n}","import BaseToken from \"./BaseToken\";\n\nexport default class ValueToken extends BaseToken {\n    constructor(iterator) {\n        super(iterator);\n        this.value = iterator.getValue();\n    }\n\n    setValue(value) {\n        this.value = value;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    parse() {\n        this.parseLeft();\n    }\n}\n","import ValueToken from \"./ValueToken\";\n\n\nexport default class NumberToken extends ValueToken {\n\n    static isApplicable(character) {\n        return /^[0-9]$/i.test( character );\n    }\n\n    parse() {\n        while(true) {\n            const nextValue = this.getIterator().getNextValue();\n            if(/^[0-9]$/i.test( nextValue )) {\n                this.getIterator().moveLeft();\n                this.setValue(this.getValue() + \"\" + nextValue);\n            } else {\n                break;\n            }\n        }\n        this.parseLeft();\n    }\n\n    evaluate() {\n        return Number(this.getValue());\n    }\n}","import ValueToken from \"./ValueToken\";\n\n\nexport default class VariableToken extends ValueToken {\n\n    static isApplicable(character) {\n        return /^[a-z]$/i.test( character );\n    }\n\n    parse() {\n        while(true) {\n            const nextValue = this.getIterator().getNextValue();\n            if(/^[a-z0-9]$/i.test( nextValue )) {\n                this.getIterator().moveLeft();\n                this.setValue(this.getValue() + \"\" + nextValue);\n            } else {\n                break;\n            }\n        }\n        this.parseLeft();\n    }\n\n    evaluate(declarations) {\n        const variableName = this.getValue();\n        if(!declarations || !(variableName in declarations)) {\n            throw SyntaxError(`Expected variable is not defined ${variableName}`);\n        }\n        const variable = declarations[variableName];\n        if(typeof variable === \"function\") {\n            return Number(variable());\n        }\n        return Number(variable);\n    }\n}","import GroupToken from \"./GroupToken\";\n\nexport default class BracketToken extends GroupToken {\n    static isApplicable(character) {\n        return character === \"(\";\n    }\n\n    isChildAllowed() {\n        return this.getIterator().getValue() !== \")\";\n    }\n\n    parse() {\n        const nextValue = this.getIterator().getNextValue();\n        if (nextValue === \")\") {\n            this.getIterator().moveNext();\n            this.parseLeft();\n        }\n        this.parseUp();\n        this.parseLeft();\n    }\n}\n","import OperatorToken from \"./OperatorToken\";\n\nexport default class LeftRightOperatorToken extends OperatorToken {\n\n    setLeftChild(child) {\n        this.addChildAtIndex(child, 0);\n    }\n\n    getLeftChild() {\n        return this.getChild(0);\n    }\n\n    setRightChild(child) {\n        this.addChildAtIndex(child, 1);\n    }\n\n    getRightChild() {\n        return this.getChild(1);\n    }\n\n    transformLeftOperand() {\n        const operand = this.getLeft();\n        if(!operand) {\n            throw SyntaxError(\"Left operand is required\");\n        }\n        const leftOperandSibling = operand.getLeft();\n        operand.getParent().removeChild(operand);\n        operand.setParent(this);\n        operand.setLeft(null);\n        operand.setRight(null);\n        this.setLeftChild(operand);\n        if(leftOperandSibling) {\n            leftOperandSibling.setRight(this);\n        }\n        this.setLeft(leftOperandSibling);\n    }\n\n    transformRightOperand() {\n        const operand = this.getRight();\n        if(!operand) {\n            throw SyntaxError(\"Right operand is required\");\n        }\n        const rightOperandSibling = operand.getRight();\n        operand.getParent().removeChild(operand);\n        operand.setParent(this);\n        operand.setLeft(null);\n        operand.setRight(null);\n        this.setRightChild(operand);\n        if(rightOperandSibling) {\n            rightOperandSibling.setLeft(this);\n        }\n        this.setRight(rightOperandSibling);\n    }\n\n    transform() {\n        this.transformLeftOperand();\n        this.transformRightOperand();\n    }\n}","import GroupToken from \"./GroupToken\";\n\n\nexport default class OperatorToken extends GroupToken {\n    parse() {\n        this.parseLeft();\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class AdditionToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"+\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) + this.getRightChild().evaluate(declarations);\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class DivisionToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"/\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) / this.getRightChild().evaluate(declarations);\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class MultiplicationToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"*\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) * this.getRightChild().evaluate(declarations);\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class SubtractionToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"-\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) - this.getRightChild().evaluate(declarations);\n    }\n}","import CharacterAccessor from \"./CharacterAccessor\";\nimport BaseToken from \"./tokens/BaseToken\";\nimport RootToken from \"./tokens/RootToken\";\nimport NumberToken from \"./tokens/NumberToken\";\nimport VariableToken from \"./tokens/VariableToken\";\nimport BracketToken from \"./tokens/BracketToken\";\nimport AdditionToken from \"./tokens/AdditionToken\";\nimport DivisionToken from \"./tokens/DivisionToken\";\nimport MultiplicationToken from \"./tokens/MultiplicationToken\";\nimport SubtractionToken from \"./tokens/SubtractionToken\";\n\nBaseToken.registerTokenType(NumberToken);\nBaseToken.registerTokenType(VariableToken);\nBaseToken.registerTokenType(AdditionToken);\nBaseToken.registerTokenType(SubtractionToken);\nBaseToken.registerTokenType(DivisionToken);\nBaseToken.registerTokenType(MultiplicationToken);\nBaseToken.registerTokenType(BracketToken);\n\nexport default function lexer(stringExpression) {\n    const iterator = new CharacterAccessor(stringExpression);\n    iterator.removeCharacters(/\\s/g);\n    const rootToken = new RootToken(iterator);\n    rootToken.parse();\n    return rootToken;\n}\n","import lexer from \"./lexer\";\nimport transformer from \"./transformer\";\n\nexport default class EvalExp {\n    constructor(rawString) {\n        this.rawString = rawString;\n    }\n\n    parse() {\n        this.rootToken = lexer(this.rawString);\n        transformer(this.rootToken);\n    }\n\n    getParsedTree() {\n        return this.rootToken;\n    }\n\n    evaluate(declarations) {\n        return this.rootToken.evaluate(declarations);\n    }\n}","import MultiplicationToken from \"./tokens/MultiplicationToken\";\nimport DivisionToken from \"./tokens/DivisionToken\";\nimport AdditionToken from \"./tokens/AdditionToken\";\nimport SubtractionToken from \"./tokens/SubtractionToken\";\n\nexport default function transformer(rootToken) {\n    const orderedOperatorTypes = [\n        MultiplicationToken,\n        DivisionToken,\n        AdditionToken,\n        SubtractionToken\n    ];\n\n    const tokenList = rootToken.getGlobalList();\n    orderedOperatorTypes.forEach(operatorType => {\n        tokenList.forEach(token => {\n            if (token instanceof operatorType) {\n                token.transform();\n            }\n        });\n    });\n    return rootToken;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(48);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}