{"version":3,"sources":["webpack://EvalExp/webpack/universalModuleDefinition","webpack://EvalExp/./src/CharacterAccessor.js","webpack://EvalExp/./src/tokens/AbstractToken.js","webpack://EvalExp/./src/tokens/GroupToken.js","webpack://EvalExp/./src/tokens/RootToken.js","webpack://EvalExp/./src/tokens/ValueToken.js","webpack://EvalExp/./src/tokens/NumberToken.js","webpack://EvalExp/./src/tokens/LeftRightOperatorToken.js","webpack://EvalExp/./src/tokens/OperatorToken.js","webpack://EvalExp/./src/tokens/MultiplicationToken.js","webpack://EvalExp/./src/tokens/transformModifier/AddMultiplicationOperatorTransformModifier.js","webpack://EvalExp/./src/tokens/transformModifier/AbstractTransformModifier.js","webpack://EvalExp/./src/tokens/VariableToken.js","webpack://EvalExp/./src/tokens/BracketToken.js","webpack://EvalExp/./src/tokens/LeftNotNullRightOperatorToken.js","webpack://EvalExp/./src/tokens/AdditionToken.js","webpack://EvalExp/./src/tokens/DivisionToken.js","webpack://EvalExp/./src/tokens/SubtractionToken.js","webpack://EvalExp/./src/lexer.js","webpack://EvalExp/./src/index.js","webpack://EvalExp/./src/transformer.js","webpack://EvalExp/webpack/bootstrap","webpack://EvalExp/webpack/startup","webpack://EvalExp/webpack/runtime/define property getters","webpack://EvalExp/webpack/runtime/hasOwnProperty shorthand","webpack://EvalExp/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","CharacterAccessor","rawString","index","charactersRegexp","replace","length","AbstractToken","iterator","SyntaxError","left","right","parent","transformModifiers","TokenType","registeredTokenTypes","push","character","ApplicableToken","find","isApplicable","modifier","addGlobalChild","getIterator","moveLeft","value","getValue","getParent","isChildAllowed","getApplicable","applicableToken","getApplicableToken","setRight","setRoot","getRoot","setLeft","setParent","addChild","parse","forEach","transform","executeTransformModifiers","GroupToken","props","children","child","removeChild","filter","declarations","getChild","evaluate","RootToken","globalChildren","parseUp","ValueToken","parseLeft","NumberToken","test","isFloatingPoint","nextValue","getNextValue","setValue","Number","LeftRightOperatorToken","addChildAtIndex","operand","getLeft","getLeftOperand","leftOperandSibling","setLeftChild","getRight","getRightOperand","rightOperandSibling","setRightChild","transformLeftOperand","transformRightOperand","MultiplicationToken","getLeftChild","getRightChild","AddMultiplicationOperatorTransformModifier","token","multiplicationToken","AbstractTransformModifier","VariableToken","addTransformModifier","variableName","variable","BracketToken","moveNext","LeftNotNullRightOperatorToken","numberToken","AdditionToken","DivisionToken","SubtractionToken","BaseToken","EvalExp","rootToken","orderedOperatorTypes","tokenList","stringExpression","removeCharacters","lexer","getGlobalList","operatorType","parseIfNotParsed","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EvalExp\"] = factory();\n\telse\n\t\troot[\"EvalExp\"] = factory();\n})(this, function() {\nreturn ","export default class CharacterAccessor {\n    constructor(rawString) {\n        this.rawString = rawString;\n        this.index = -1;\n    }\n\n    removeCharacters(charactersRegexp) {\n        this.rawString = this.rawString.replace(charactersRegexp, \"\");\n    }\n\n    getValue() {\n        return this.rawString[this.index];\n    }\n\n    getNextValue() {\n        return this.rawString[this.index + 1];\n    }\n\n    getPrevValue() {\n        return this.rawString[this.index - 1];\n    }\n\n    moveLeft() {\n        if (this.index + 1 >= this.rawString.length) {\n            return null;\n        } else {\n            this.index++;\n            return true;\n        }\n    }\n\n    moveRight() {\n        if (this.index - 1 < 0) {\n            return null;\n        } else {\n            this.index--;\n            return true;\n        }\n    }\n}\n","export default class AbstractToken {\n    static registeredTokenTypes = [];\n\n    static registerTokenType(TokenType) {\n        AbstractToken.registeredTokenTypes.push(TokenType);\n    }\n\n    static getApplicable(character) {\n        const ApplicableToken = AbstractToken.registeredTokenTypes.find(TokenType =>\n            TokenType.isApplicable(character)\n        );\n        if (ApplicableToken) {\n            return ApplicableToken;\n        } else {\n            throw SyntaxError(`No applicable token type for ${character}`);\n        }\n    }\n\n    static isApplicable(character) {\n        return false;\n    }\n\n    constructor(iterator) {\n        if (new.target === AbstractToken) {\n            throw SyntaxError(\"AbstractToken is abstract class\");\n        }\n        this.iterator = iterator;\n        this.left = null;\n        this.right = null;\n        this.parent = null;\n        this.root = null;\n        this.transformModifiers = [];\n    }\n\n    addTransformModifier(modifier) {\n        this.transformModifiers.push(modifier);\n    }\n\n    getIterator() {\n        return this.iterator;\n    }\n\n    setLeft(left) {\n        this.left = left;\n    }\n\n    getLeft() {\n        return this.left;\n    }\n\n    setRight(right) {\n        this.right = right;\n    }\n\n    getRight() {\n        return this.right;\n    }\n\n    setParent(parent) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    setRoot(root) {\n        this.root = root;\n        this.root.addGlobalChild(this);\n    }\n\n    getRoot() {\n        return this.root;\n    }\n\n    isChildAllowed() {\n        return true;\n    }\n\n    getApplicableToken() {\n        if (this.getIterator().moveLeft()) {\n            const value = this.getIterator().getValue();\n            if (value && (!this.getParent() || this.getParent().isChildAllowed())) {\n                const ApplicableTokenType = AbstractToken.getApplicable(value);\n                const applicableToken = new ApplicableTokenType(this.getIterator());\n                return applicableToken;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    parseLeft() {\n        const applicableToken = this.getApplicableToken();\n        if (applicableToken) {\n            this.setRight(applicableToken);\n            applicableToken.setRoot(this.getRoot());\n            applicableToken.setLeft(this);\n            applicableToken.setParent(this.getParent());\n            this.getParent().addChild(applicableToken);\n            applicableToken.parse();\n        }\n    }\n\n    parse() {}\n\n    executeTransformModifiers() {\n        this.transformModifiers.forEach(modifier => modifier.transform(this));\n    }\n\n    transform() {\n        this.executeTransformModifiers();\n    }\n\n    evaluate() {}\n}\n","import AbstractToken from \"./AbstractToken\";\n\n\nexport default class GroupToken extends AbstractToken{\n    constructor(props) {\n        super(props);\n        this.children = [];\n    }\n\n    addChild(child) {\n        this.children.push(child);\n    }\n\n    removeChild(removeChild) {\n        this.children = this.children.filter(child => child !== removeChild);\n    }\n\n    addChildAtIndex(child, index) {\n        this.children[index] = child;\n    }\n\n    getChild(index) {\n        return this.children[index];\n    }\n\n    parseUp() {\n        const applicableToken = this.getApplicableToken();\n        if(applicableToken) {\n            this.addChild(applicableToken);\n            applicableToken.setRoot(this.getRoot());\n            applicableToken.setParent(this);\n            applicableToken.parse();\n        }\n    }\n\n    evaluate(declarations) {\n        return this.getChild(0).evaluate(declarations);\n    }\n}","import GroupToken from \"./GroupToken\";\n\n\nexport default class RootToken extends GroupToken {\n\n    constructor(iterator) {\n        super(iterator);\n        this.globalChildren = [];\n        this.setRoot(this);\n    }\n\n    setRoot(root) {\n        this.root = root;\n    }\n\n    addGlobalChild(child) {\n        this.globalChildren.push(child);\n    }\n\n    getGlobalList(index) {\n        return this.globalChildren;\n    }\n\n    parse() {\n        this.parseUp();\n    }\n}","import AbstractToken from \"./AbstractToken\";\n\nexport default class ValueToken extends AbstractToken {\n    constructor(iterator) {\n        super(iterator);\n        this.value = iterator.getValue();\n    }\n\n    setValue(value) {\n        this.value = value;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    parse() {\n        this.parseLeft();\n    }\n}\n","import ValueToken from \"./ValueToken\";\n\nexport default class NumberToken extends ValueToken {\n\n    static isApplicable(character) {\n        return /^[0-9]$/i.test( character );\n    }\n\n    parse() {\n        let isFloatingPoint = false;\n        while(true) {\n            const nextValue = this.getIterator().getNextValue();\n            if(/^[0-9.]$/i.test( nextValue )) {\n                if(nextValue === \".\") {\n                    if(isFloatingPoint) {\n                        throw SyntaxError(\"More than one floating point in number\");\n                    } else {\n                        isFloatingPoint = true;\n\n                    }\n                }\n                this.getIterator().moveLeft();\n                this.setValue(this.getValue() + \"\" + nextValue);\n            } else {\n                break;\n            }\n        }\n        this.parseLeft();\n    }\n\n    evaluate() {\n        return Number(this.getValue());\n    }\n}","import OperatorToken from \"./OperatorToken\";\n\nexport default class LeftRightOperatorToken extends OperatorToken {\n\n    setLeftChild(child) {\n        this.addChildAtIndex(child, 0);\n    }\n\n    getLeftChild() {\n        return this.getChild(0);\n    }\n\n    setRightChild(child) {\n        this.addChildAtIndex(child, 1);\n    }\n\n    getRightChild() {\n        return this.getChild(1);\n    }\n\n    getLeftOperand() {\n        const operand = this.getLeft();\n        if(!operand) {\n            throw SyntaxError(\"Left operand is required\");\n        }\n        return operand;\n    }\n\n    transformLeftOperand() {\n        const operand = this.getLeftOperand();\n        const leftOperandSibling = operand.getLeft();\n        if(operand.getParent()) {\n            operand.getParent().removeChild(operand);\n        }\n        operand.setParent(this);\n        operand.setLeft(null);\n        operand.setRight(null);\n        this.setLeftChild(operand);\n        if(leftOperandSibling) {\n            leftOperandSibling.setRight(this);\n        }\n        this.setLeft(leftOperandSibling);\n    }\n\n    getRightOperand() {\n        const operand = this.getRight();\n        if(!operand) {\n            throw SyntaxError(\"Right operand is required\");\n        }\n        return operand;\n    }\n\n    transformRightOperand() {\n        const operand = this.getRightOperand();\n        const rightOperandSibling = operand.getRight();\n        if(operand.getParent()) {\n            operand.getParent().removeChild(operand);\n        }\n        operand.getParent().removeChild(operand);\n        operand.setParent(this);\n        operand.setLeft(null);\n        operand.setRight(null);\n        this.setRightChild(operand);\n        if(rightOperandSibling) {\n            rightOperandSibling.setLeft(this);\n        }\n        this.setRight(rightOperandSibling);\n    }\n\n    transform() {\n        this.transformLeftOperand();\n        this.transformRightOperand();\n    }\n}","import GroupToken from \"./GroupToken\";\n\n\nexport default class OperatorToken extends GroupToken {\n    parse() {\n        this.parseLeft();\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class MultiplicationToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"*\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) * this.getRightChild().evaluate(declarations);\n    }\n}","import NumberToken from \"../NumberToken\";\nimport MultiplicationToken from \"../MultiplicationToken\";\nimport AbstractTransformModifier from \"./AbstractTransformModifier\";\n\nexport default class AddMultiplicationOperatorTransformModifier extends AbstractTransformModifier{\n    transform(token) {\n        const operand = token.getLeft();\n        if(operand && operand instanceof NumberToken) {\n            const multiplicationToken = new MultiplicationToken(token.getIterator());\n            operand.setRight(multiplicationToken);\n            multiplicationToken.setLeft(operand);\n            token.setLeft(multiplicationToken);\n            multiplicationToken.setRight(token);\n            multiplicationToken.setParent(token.getParent());\n            token.getParent().addChild(multiplicationToken);\n            multiplicationToken.setRoot(token.getRoot());\n        }\n    }\n}","export default class AbstractTransformModifier {\n    constructor() {\n        if (new.target === AbstractTransformModifier) {\n            throw SyntaxError(\"AbstractModificator is abstract class\");\n        }\n    }\n\n    transform() {\n        return true;\n    }\n}\n","import ValueToken from \"./ValueToken\";\nimport AddMultiplicationOperatorTransformModifier from \"./transformModifier/AddMultiplicationOperatorTransformModifier\";\n\n\nexport default class VariableToken extends ValueToken {\n\n    static isApplicable(character) {\n        return /^[a-z]$/i.test( character );\n    }\n\n    constructor(iterator) {\n        super(iterator);\n        this.addTransformModifier(new AddMultiplicationOperatorTransformModifier());\n    }\n\n    parse() {\n        while(true) {\n            const nextValue = this.getIterator().getNextValue();\n            if(/^[a-z0-9]$/i.test( nextValue )) {\n                this.getIterator().moveLeft();\n                this.setValue(this.getValue() + \"\" + nextValue);\n            } else {\n                break;\n            }\n        }\n        this.parseLeft();\n    }\n\n    evaluate(declarations) {\n        const variableName = this.getValue();\n        if(!declarations || !(variableName in declarations)) {\n            throw SyntaxError(`Expected variable is not defined ${variableName}`);\n        }\n        const variable = declarations[variableName];\n        if(typeof variable === \"function\") {\n            return Number(variable());\n        }\n        return Number(variable);\n    }\n}","import GroupToken from \"./GroupToken\";\nimport AddMultiplicationOperatorTransformModifier from \"./transformModifier/AddMultiplicationOperatorTransformModifier\";\n\nexport default class BracketToken extends GroupToken {\n    static isApplicable(character) {\n        return character === \"(\";\n    }\n\n    constructor(iterator) {\n        super(iterator);\n        this.addTransformModifier(new AddMultiplicationOperatorTransformModifier());\n    }\n\n    isChildAllowed() {\n        return this.getIterator().getValue() !== \")\";\n    }\n\n    parse() {\n        const nextValue = this.getIterator().getNextValue();\n        if (nextValue === \")\") {\n            this.getIterator().moveNext();\n            this.parseLeft();\n        }\n        this.parseUp();\n        this.parseLeft();\n    }\n}\n","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\nimport NumberToken from \"./NumberToken\";\n\nexport default class LeftNotNullRightOperatorToken extends LeftRightOperatorToken {\n\n    getLeftOperand() {\n        const operand = this.getLeft();\n        if(!operand) {\n            const numberToken = new NumberToken(this.getIterator());\n            numberToken.setValue(0);\n            return numberToken;\n        }\n        return operand;\n    }\n}","import LeftNotNullRightOperatorToken from \"./LeftNotNullRightOperatorToken\";\n\nexport default class AdditionToken extends LeftNotNullRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"+\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) + this.getRightChild().evaluate(declarations);\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class DivisionToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"/\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) / this.getRightChild().evaluate(declarations);\n    }\n}","import LeftNotNullRightOperatorToken from \"./LeftNotNullRightOperatorToken\";\n\n\nexport default class SubtractionToken extends LeftNotNullRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"-\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) - this.getRightChild().evaluate(declarations);\n    }\n}","import CharacterAccessor from \"./CharacterAccessor\";\nimport BaseToken from \"./tokens/AbstractToken\";\nimport RootToken from \"./tokens/RootToken\";\nimport NumberToken from \"./tokens/NumberToken\";\nimport VariableToken from \"./tokens/VariableToken\";\nimport BracketToken from \"./tokens/BracketToken\";\nimport AdditionToken from \"./tokens/AdditionToken\";\nimport DivisionToken from \"./tokens/DivisionToken\";\nimport MultiplicationToken from \"./tokens/MultiplicationToken\";\nimport SubtractionToken from \"./tokens/SubtractionToken\";\n\nBaseToken.registerTokenType(NumberToken);\nBaseToken.registerTokenType(VariableToken);\nBaseToken.registerTokenType(AdditionToken);\nBaseToken.registerTokenType(SubtractionToken);\nBaseToken.registerTokenType(DivisionToken);\nBaseToken.registerTokenType(MultiplicationToken);\nBaseToken.registerTokenType(BracketToken);\n\nexport default function lexer(stringExpression) {\n    const iterator = new CharacterAccessor(stringExpression);\n    iterator.removeCharacters(/\\s/g);\n    const rootToken = new RootToken(iterator);\n    rootToken.parse();\n    return rootToken;\n}\n","import lexer from \"./lexer\";\nimport transformer from \"./transformer\";\n\nclass EvalExp {\n    constructor(rawString) {\n        this.rawString = rawString;\n        this.rootToken = null;\n    }\n\n    parse() {\n        this.rootToken = lexer(this.rawString);\n        transformer(this.rootToken);\n    }\n\n    getParsedTree() {\n        this.parseIfNotParsed();\n        return this.rootToken;\n    }\n\n    evaluate(declarations = {}) {\n        this.parseIfNotParsed();\n        return this.rootToken.evaluate(declarations);\n    }\n\n    parseIfNotParsed() {\n        if(!this.rootToken) {\n            this.parse();\n        }\n    }\n}\n\nexport default EvalExp;\nexport {\n    EvalExp\n};","import MultiplicationToken from \"./tokens/MultiplicationToken\";\nimport DivisionToken from \"./tokens/DivisionToken\";\nimport AdditionToken from \"./tokens/AdditionToken\";\nimport SubtractionToken from \"./tokens/SubtractionToken\";\nimport VariableToken from \"./tokens/VariableToken\";\nimport BracketToken from \"./tokens/BracketToken\";\n\nexport default function transformer(rootToken) {\n    const orderedOperatorTypes = [\n        BracketToken,\n        VariableToken,\n        MultiplicationToken,\n        DivisionToken,\n        AdditionToken,\n        SubtractionToken\n    ];\n\n    const tokenList = rootToken.getGlobalList();\n    orderedOperatorTypes.forEach(operatorType => {\n        tokenList.forEach(token => {\n            if (token instanceof operatorType) {\n                token.transform();\n            }\n        });\n    });\n    return rootToken;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(287);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}