{"version":3,"sources":["webpack://EvalExp/webpack/universalModuleDefinition","webpack://EvalExp/./src/CharacterAccessor.js","webpack://EvalExp/./src/tokens/BaseToken.js","webpack://EvalExp/./src/tokens/GroupToken.js","webpack://EvalExp/./src/tokens/RootToken.js","webpack://EvalExp/./src/tokens/ValueToken.js","webpack://EvalExp/./src/tokens/NumberToken.js","webpack://EvalExp/./src/tokens/LeftRightOperatorToken.js","webpack://EvalExp/./src/tokens/OperatorToken.js","webpack://EvalExp/./src/tokens/MultiplicationToken.js","webpack://EvalExp/./src/tokens/VariableToken.js","webpack://EvalExp/./src/tokens/BracketToken.js","webpack://EvalExp/./src/tokens/LeftNotNullRightOperatorToken.js","webpack://EvalExp/./src/tokens/AdditionToken.js","webpack://EvalExp/./src/tokens/DivisionToken.js","webpack://EvalExp/./src/tokens/SubtractionToken.js","webpack://EvalExp/./src/lexer.js","webpack://EvalExp/./src/index.js","webpack://EvalExp/./src/transformer.js","webpack://EvalExp/webpack/bootstrap","webpack://EvalExp/webpack/startup","webpack://EvalExp/webpack/runtime/define property getters","webpack://EvalExp/webpack/runtime/hasOwnProperty shorthand","webpack://EvalExp/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","CharacterAccessor","rawString","this","index","charactersRegexp","replace","length","BaseToken","iterator","left","right","parent","TokenType","registeredTokenTypes","push","character","ApplicableToken","find","isApplicable","SyntaxError","addGlobalChild","getIterator","moveLeft","value","getValue","getParent","isChildAllowed","getApplicable","applicableToken","getApplicableToken","setRight","setRoot","getRoot","setLeft","setParent","addChild","parse","GroupToken","props","children","child","removeChild","filter","declarations","getChild","evaluate","RootToken","globalChildren","parseUp","ValueToken","parseLeft","NumberToken","test","isFloatingPoint","nextValue","getNextValue","setValue","Number","LeftRightOperatorToken","addChildAtIndex","operand","getLeft","getLeftOperand","leftOperandSibling","setLeftChild","getRight","getRightOperand","rightOperandSibling","setRightChild","transformLeftOperand","transformRightOperand","MultiplicationToken","getLeftChild","getRightChild","VariableToken","multiplicationToken","transformAddMultiplicationOperator","variableName","variable","BracketToken","moveNext","LeftNotNullRightOperatorToken","numberToken","AdditionToken","DivisionToken","SubtractionToken","registerTokenType","EvalExp","rootToken","orderedOperatorTypes","tokenList","stringExpression","removeCharacters","lexer","getGlobalList","forEach","operatorType","token","transform","parseIfNotParsed","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAiB,QAAID,IAErBD,EAAc,QAAIC,IARpB,CASGK,MAAM,WACT,M,iPCVqBC,E,WACjB,WAAYC,I,4FAAW,SACnBC,KAAKD,UAAYA,EACjBC,KAAKC,OAAS,E,8DAGDC,GACbF,KAAKD,UAAYC,KAAKD,UAAUI,QAAQD,EAAkB,M,iCAI1D,OAAOF,KAAKD,UAAUC,KAAKC,S,qCAI3B,OAAOD,KAAKD,UAAUC,KAAKC,MAAQ,K,qCAInC,OAAOD,KAAKD,UAAUC,KAAKC,MAAQ,K,iCAInC,OAAID,KAAKC,MAAQ,GAAKD,KAAKD,UAAUK,OAC1B,MAEPJ,KAAKC,SACE,K,kCAKX,OAAID,KAAKC,MAAQ,EAAI,EACV,MAEPD,KAAKC,SACE,Q,+PCpCEI,E,WAsBjB,WAAYC,I,4FAAU,SAClBN,KAAKM,SAAWA,EAChBN,KAAKO,KAAO,KACZP,KAAKQ,MAAQ,KACbR,KAAKS,OAAS,KACdT,KAAKT,KAAO,K,yDAxBSmB,GACrBL,EAAUM,qBAAqBC,KAAKF,K,oCAGnBG,GACjB,IAAMC,EAAkBT,EAAUM,qBAAqBI,MAAK,SAAAL,GAAS,OACjEA,EAAUM,aAAaH,MAE3B,GAAIC,EACA,OAAOA,EAEP,MAAMG,YAAY,gCAAD,OAAiCJ,M,mCAItCA,GAChB,OAAO,M,yCAYP,OAAOb,KAAKM,W,8BAGRC,GACJP,KAAKO,KAAOA,I,gCAIZ,OAAOP,KAAKO,O,+BAGPC,GACLR,KAAKQ,MAAQA,I,iCAIb,OAAOR,KAAKQ,Q,gCAGNC,GACNT,KAAKS,OAASA,I,kCAId,OAAOT,KAAKS,S,8BAGRlB,GACJS,KAAKT,KAAOA,EACZS,KAAKT,KAAK2B,eAAelB,Q,gCAIzB,OAAOA,KAAKT,O,uCAIZ,OAAO,I,2CAIP,GAAIS,KAAKmB,cAAcC,WAAY,CAC/B,IAAMC,EAAQrB,KAAKmB,cAAcG,WACjC,OAAID,GAAWrB,KAAKuB,cAAevB,KAAKuB,YAAYC,iBAKzC,KAHiB,IADInB,EAAUoB,cAAcJ,GAC5B,CAAwBrB,KAAKmB,eAMzD,OAAO,O,kCAKX,IAAMO,EAAkB1B,KAAK2B,qBAC1BD,IACC1B,KAAK4B,SAASF,GACdA,EAAgBG,QAAQ7B,KAAK8B,WAC7BJ,EAAgBK,QAAQ/B,MACxB0B,EAAgBM,UAAUhC,KAAKuB,aAC/BvB,KAAKuB,YAAYU,SAASP,GAC1BA,EAAgBQ,W,q3BA7FM,I,8BADb7B,G,0FCGA8B,E,kpBACjB,WAAYC,GAAO,a,4FAAA,UACf,cAAMA,IACDC,SAAW,GAFD,E,8CAKVC,GACLtC,KAAKqC,SAASzB,KAAK0B,K,kCAGXC,GACRvC,KAAKqC,SAAWrC,KAAKqC,SAASG,QAAO,SAAAF,GAAK,OAAIA,IAAUC,O,sCAG5CD,EAAOrC,GACnBD,KAAKqC,SAASpC,GAASqC,I,+BAGlBrC,GACL,OAAOD,KAAKqC,SAASpC,K,gCAIrB,IAAMyB,EAAkB1B,KAAK2B,qBAC1BD,IACC1B,KAAKiC,SAASP,GACdA,EAAgBG,QAAQ7B,KAAK8B,WAC7BJ,EAAgBM,UAAUhC,MAC1B0B,EAAgBQ,W,+BAIfO,GACL,OAAOzC,KAAK0C,SAAS,GAAGC,SAASF,Q,oBAjCDpC,G,8yBCAnBuC,E,kpBAEjB,WAAYtC,GAAU,a,4FAAA,UAClB,cAAMA,IACDuC,eAAiB,GACtB,EAAKhB,QAAL,MAHkB,E,6CAMdtC,GACJS,KAAKT,KAAOA,I,qCAGD+C,GACXtC,KAAK6C,eAAejC,KAAK0B,K,oCAGfrC,GACV,OAAOD,KAAK6C,iB,8BAIZ7C,KAAK8C,e,oBArB0BX,G,2yBCDlBY,E,kpBACjB,WAAYzC,GAAU,a,4FAAA,UAClB,cAAMA,IACDe,MAAQf,EAASgB,WAFJ,E,8CAKbD,GACLrB,KAAKqB,MAAQA,I,iCAIb,OAAOrB,KAAKqB,Q,8BAIZrB,KAAKgD,iB,oBAf2B3C,G,y4BCAnB4C,E,2vBAEGpC,GAChB,MAAO,WAAWqC,KAAMrC,O,iCAKxB,IADA,IAAIsC,GAAkB,IACV,CACR,IAAMC,EAAYpD,KAAKmB,cAAckC,eACrC,IAAG,YAAYH,KAAME,GAYjB,MAXA,GAAiB,MAAdA,EAAmB,CAClB,GAAGD,EACC,MAAMlC,YAAY,0CAElBkC,GAAkB,EAI1BnD,KAAKmB,cAAcC,WACnBpB,KAAKsD,SAAStD,KAAKsB,WAAa,GAAK8B,GAK7CpD,KAAKgD,c,iCAIL,OAAOO,OAAOvD,KAAKsB,iB,8BA7BcyB,G,8wDCApBS,E,0vBAEJlB,GACTtC,KAAKyD,gBAAgBnB,EAAO,K,qCAI5B,OAAOtC,KAAK0C,SAAS,K,oCAGXJ,GACVtC,KAAKyD,gBAAgBnB,EAAO,K,sCAI5B,OAAOtC,KAAK0C,SAAS,K,uCAIrB,IAAMgB,EAAU1D,KAAK2D,UACrB,IAAID,EACA,MAAMzC,YAAY,4BAEtB,OAAOyC,I,6CAIP,IAAMA,EAAU1D,KAAK4D,iBACfC,EAAqBH,EAAQC,UAChCD,EAAQnC,aACPmC,EAAQnC,YAAYgB,YAAYmB,GAEpCA,EAAQ1B,UAAUhC,MAClB0D,EAAQ3B,QAAQ,MAChB2B,EAAQ9B,SAAS,MACjB5B,KAAK8D,aAAaJ,GACfG,GACCA,EAAmBjC,SAAS5B,MAEhCA,KAAK+B,QAAQ8B,K,wCAIb,IAAMH,EAAU1D,KAAK+D,WACrB,IAAIL,EACA,MAAMzC,YAAY,6BAEtB,OAAOyC,I,8CAIP,IAAMA,EAAU1D,KAAKgE,kBACfC,EAAsBP,EAAQK,WACjCL,EAAQnC,aACPmC,EAAQnC,YAAYgB,YAAYmB,GAEpCA,EAAQnC,YAAYgB,YAAYmB,GAChCA,EAAQ1B,UAAUhC,MAClB0D,EAAQ3B,QAAQ,MAChB2B,EAAQ9B,SAAS,MACjB5B,KAAKkE,cAAcR,GAChBO,GACCA,EAAoBlC,QAAQ/B,MAEhCA,KAAK4B,SAASqC,K,kCAIdjE,KAAKmE,uBACLnE,KAAKoE,6B,ywBClELpE,KAAKgD,iB,oBAF8Bb,I,44BCAtBkC,G,8vBACGxD,GAChB,MAAqB,MAAdA,M,kCAGF4B,GACL,OAAOzC,KAAKsE,eAAe3B,SAASF,GAAgBzC,KAAKuE,gBAAgB5B,SAASF,Q,8BANzCe,G,m5BCE5BgB,G,gwBAEG3D,GAChB,MAAO,WAAWqC,KAAMrC,O,iCAIxB,OAAY,CACR,IAAMuC,EAAYpD,KAAKmB,cAAckC,eACrC,IAAG,cAAcH,KAAME,GAInB,MAHApD,KAAKmB,cAAcC,WACnBpB,KAAKsD,SAAStD,KAAKsB,WAAa,GAAK8B,GAK7CpD,KAAKgD,c,2DAIL,IAAMU,EAAU1D,KAAK2D,UACrB,GAAGD,GAAWA,aAAmBT,EAAa,CAC1C,IAAMwB,EAAsB,IAAIJ,GAAoBrE,KAAKmB,eACzDuC,EAAQ9B,SAAS6C,GACjBA,EAAoB1C,QAAQ2B,GAC5B1D,KAAK+B,QAAQ0C,GACbA,EAAoB7C,SAAS5B,MAC7ByE,EAAoBzC,UAAUhC,KAAKuB,aACnCvB,KAAKuB,YAAYU,SAASwC,GAC1BA,EAAoB5C,QAAQ7B,KAAK8B,c,kCAKrC9B,KAAK0E,uC,+BAGAjC,GACL,IAAMkC,EAAe3E,KAAKsB,WAC1B,IAAImB,KAAkBkC,KAAgBlC,GAClC,MAAMxB,YAAY,oCAAD,OAAqC0D,IAE1D,IAAMC,EAAWnC,EAAakC,GAC9B,OACWpB,OADY,mBAAbqB,EACQA,IAEJA,Q,gCA9CqB7B,G,m5BCHtB8B,G,gwBACGhE,GAChB,MAAqB,MAAdA,M,0CAIP,MAAyC,MAAlCb,KAAKmB,cAAcG,a,8BAKR,MADAtB,KAAKmB,cAAckC,iBAEjCrD,KAAKmB,cAAc2D,WACnB9E,KAAKgD,aAEThD,KAAK8C,UACL9C,KAAKgD,iB,gCAhB6Bb,G,m5BCCrB4C,G,mwBAGb,IAAMrB,EAAU1D,KAAK2D,UACrB,IAAID,EAAS,CACT,IAAMsB,EAAc,IAAI/B,EAAYjD,KAAKmB,eAEzC,OADA6D,EAAY1B,SAAS,GACd0B,EAEX,OAAOtB,O,qBAT4CF,G,m5BCDtCyB,G,gwBACGpE,GAChB,MAAqB,MAAdA,M,kCAGF4B,GACL,OAAOzC,KAAKsE,eAAe3B,SAASF,GAAgBzC,KAAKuE,gBAAgB5B,SAASF,Q,gCAN/CsC,I,m5BCCtBG,G,gwBACGrE,GAChB,MAAqB,MAAdA,M,kCAGF4B,GACL,OAAOzC,KAAKsE,eAAe3B,SAASF,GAAgBzC,KAAKuE,gBAAgB5B,SAASF,Q,gCAN/Ce,G,m5BCAtB2B,G,gwBACGtE,GAChB,MAAqB,MAAdA,M,kCAGF4B,GACL,OAAOzC,KAAKsE,eAAe3B,SAASF,GAAgBzC,KAAKuE,gBAAgB5B,SAASF,Q,gCAN5CsC,I,uKCQ9C1E,EAAU+E,kBAAkBnC,GAC5B5C,EAAU+E,kBAAkBZ,IAC5BnE,EAAU+E,kBAAkBH,IAC5B5E,EAAU+E,kBAAkBD,IAC5B9E,EAAU+E,kBAAkBF,IAC5B7E,EAAU+E,kBAAkBf,IAC5BhE,EAAU+E,kBAAkBP,I,ICdPQ,G,WACjB,WAAYtF,I,4FAAW,SACnBC,KAAKD,UAAYA,EACjBC,KAAKsF,UAAY,K,qDCAV,IAAqBA,EAC1BC,EAQAC,EDLFxF,KAAKsF,UDSE,SAAeG,GAC1B,IAAMnF,EAAW,IAAIR,EAAkB2F,GACvCnF,EAASoF,iBAAiB,OAC1B,IAAMJ,EAAY,IAAI1C,EAAUtC,GAEhC,OADAgF,EAAUpD,QACHoD,ECdcK,CAAM3F,KAAKD,WCJAuF,EDKhBtF,KAAKsF,UCJfC,EAAuB,CACzBf,GACAH,GACAa,GACAD,GACAE,IAGEK,EAAYF,EAAUM,gBAC5BL,EAAqBM,SAAQ,SAAAC,GACzBN,EAAUK,SAAQ,SAAAE,GACVA,aAAiBD,GACjBC,EAAMC,oB,sCDHd,OADAhG,KAAKiG,mBACEjG,KAAKsF,Y,iCAGY,IAAnB7C,EAAmB,uDAAJ,GAEpB,OADAzC,KAAKiG,mBACEjG,KAAKsF,UAAU3C,SAASF,K,yCAI3BzC,KAAKsF,WACLtF,KAAKkC,a,yBEzBbgE,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAU3G,QAG3C,IAAIC,EAASwG,EAAyBE,GAAY,CAGjD3G,QAAS,IAOV,OAHA4G,EAAoBD,GAAU1G,EAAQA,EAAOD,QAAS0G,GAG/CzG,EAAOD,QCjBf,OCFA0G,EAAoBG,EAAI,CAAC7G,EAAS8G,KACjC,IAAI,IAAIC,KAAOD,EACXJ,EAAoBM,EAAEF,EAAYC,KAASL,EAAoBM,EAAEhH,EAAS+G,IAC5EE,OAAOC,eAAelH,EAAS+G,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EL,EAAoBM,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFZ,EAAoBgB,EAAK1H,IACH,oBAAX2H,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAelH,EAAS2H,OAAOC,YAAa,CAAEhG,MAAO,WAE7DqF,OAAOC,eAAelH,EAAS,aAAc,CAAE4B,OAAO,KHFhD8E,EAAoB,M","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EvalExp\"] = factory();\n\telse\n\t\troot[\"EvalExp\"] = factory();\n})(self, function() {\nreturn ","export default class CharacterAccessor {\n    constructor(rawString) {\n        this.rawString = rawString;\n        this.index = -1;\n    }\n\n    removeCharacters(charactersRegexp) {\n        this.rawString = this.rawString.replace(charactersRegexp, \"\");\n    }\n\n    getValue() {\n        return this.rawString[this.index];\n    }\n\n    getNextValue() {\n        return this.rawString[this.index + 1];\n    }\n\n    getPrevValue() {\n        return this.rawString[this.index - 1];\n    }\n\n    moveLeft() {\n        if (this.index + 1 >= this.rawString.length) {\n            return null;\n        } else {\n            this.index++;\n            return true;\n        }\n    }\n\n    moveRight() {\n        if (this.index - 1 < 0) {\n            return null;\n        } else {\n            this.index--;\n            return true;\n        }\n    }\n}\n","export default class BaseToken {\n    static registeredTokenTypes = [];\n\n    static registerTokenType(TokenType) {\n        BaseToken.registeredTokenTypes.push(TokenType);\n    }\n\n    static getApplicable(character) {\n        const ApplicableToken = BaseToken.registeredTokenTypes.find(TokenType =>\n            TokenType.isApplicable(character)\n        );\n        if (ApplicableToken) {\n            return ApplicableToken;\n        } else {\n            throw SyntaxError(`No applicable token type for ${character}`);\n        }\n    }\n\n    static isApplicable(character) {\n        return false;\n    }\n\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.left = null;\n        this.right = null;\n        this.parent = null;\n        this.root = null;\n    }\n\n    getIterator() {\n        return this.iterator;\n    }\n\n    setLeft(left) {\n        this.left = left;\n    }\n\n    getLeft() {\n        return this.left;\n    }\n\n    setRight(right) {\n        this.right = right;\n    }\n\n    getRight() {\n        return this.right;\n    }\n\n    setParent(parent) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    setRoot(root) {\n        this.root = root;\n        this.root.addGlobalChild(this);\n    }\n\n    getRoot() {\n        return this.root;\n    }\n\n    isChildAllowed() {\n        return true;\n    }\n\n    getApplicableToken() {\n        if (this.getIterator().moveLeft()) {\n            const value = this.getIterator().getValue();\n            if (value && (!this.getParent() || this.getParent().isChildAllowed())) {\n                const ApplicableTokenType = BaseToken.getApplicable(value);\n                const applicableToken = new ApplicableTokenType(this.getIterator());\n                return applicableToken;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    parseLeft() {\n        const applicableToken = this.getApplicableToken();\n        if(applicableToken) {\n            this.setRight(applicableToken);\n            applicableToken.setRoot(this.getRoot());\n            applicableToken.setLeft(this);\n            applicableToken.setParent(this.getParent());\n            this.getParent().addChild(applicableToken);\n            applicableToken.parse();\n        }\n    }\n\n    parse() {}\n\n    evaluate() {}\n}\n","import BaseToken from \"./BaseToken\";\n\n\nexport default class GroupToken extends BaseToken{\n    constructor(props) {\n        super(props);\n        this.children = [];\n    }\n\n    addChild(child) {\n        this.children.push(child);\n    }\n\n    removeChild(removeChild) {\n        this.children = this.children.filter(child => child !== removeChild);\n    }\n\n    addChildAtIndex(child, index) {\n        this.children[index] = child;\n    }\n\n    getChild(index) {\n        return this.children[index];\n    }\n\n    parseUp() {\n        const applicableToken = this.getApplicableToken();\n        if(applicableToken) {\n            this.addChild(applicableToken);\n            applicableToken.setRoot(this.getRoot());\n            applicableToken.setParent(this);\n            applicableToken.parse();\n        }\n    }\n\n    evaluate(declarations) {\n        return this.getChild(0).evaluate(declarations);\n    }\n}","import GroupToken from \"./GroupToken\";\n\n\nexport default class RootToken extends GroupToken {\n\n    constructor(iterator) {\n        super(iterator);\n        this.globalChildren = [];\n        this.setRoot(this);\n    }\n\n    setRoot(root) {\n        this.root = root;\n    }\n\n    addGlobalChild(child) {\n        this.globalChildren.push(child);\n    }\n\n    getGlobalList(index) {\n        return this.globalChildren;\n    }\n\n    parse() {\n        this.parseUp();\n    }\n}","import BaseToken from \"./BaseToken\";\n\nexport default class ValueToken extends BaseToken {\n    constructor(iterator) {\n        super(iterator);\n        this.value = iterator.getValue();\n    }\n\n    setValue(value) {\n        this.value = value;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    parse() {\n        this.parseLeft();\n    }\n}\n","import ValueToken from \"./ValueToken\";\n\nexport default class NumberToken extends ValueToken {\n\n    static isApplicable(character) {\n        return /^[0-9]$/i.test( character );\n    }\n\n    parse() {\n        let isFloatingPoint = false;\n        while(true) {\n            const nextValue = this.getIterator().getNextValue();\n            if(/^[0-9.]$/i.test( nextValue )) {\n                if(nextValue === \".\") {\n                    if(isFloatingPoint) {\n                        throw SyntaxError(\"More than one floating point in number\");\n                    } else {\n                        isFloatingPoint = true;\n\n                    }\n                }\n                this.getIterator().moveLeft();\n                this.setValue(this.getValue() + \"\" + nextValue);\n            } else {\n                break;\n            }\n        }\n        this.parseLeft();\n    }\n\n    evaluate() {\n        return Number(this.getValue());\n    }\n}","import OperatorToken from \"./OperatorToken\";\n\nexport default class LeftRightOperatorToken extends OperatorToken {\n\n    setLeftChild(child) {\n        this.addChildAtIndex(child, 0);\n    }\n\n    getLeftChild() {\n        return this.getChild(0);\n    }\n\n    setRightChild(child) {\n        this.addChildAtIndex(child, 1);\n    }\n\n    getRightChild() {\n        return this.getChild(1);\n    }\n\n    getLeftOperand() {\n        const operand = this.getLeft();\n        if(!operand) {\n            throw SyntaxError(\"Left operand is required\");\n        }\n        return operand;\n    }\n\n    transformLeftOperand() {\n        const operand = this.getLeftOperand();\n        const leftOperandSibling = operand.getLeft();\n        if(operand.getParent()) {\n            operand.getParent().removeChild(operand);\n        }\n        operand.setParent(this);\n        operand.setLeft(null);\n        operand.setRight(null);\n        this.setLeftChild(operand);\n        if(leftOperandSibling) {\n            leftOperandSibling.setRight(this);\n        }\n        this.setLeft(leftOperandSibling);\n    }\n\n    getRightOperand() {\n        const operand = this.getRight();\n        if(!operand) {\n            throw SyntaxError(\"Right operand is required\");\n        }\n        return operand;\n    }\n\n    transformRightOperand() {\n        const operand = this.getRightOperand();\n        const rightOperandSibling = operand.getRight();\n        if(operand.getParent()) {\n            operand.getParent().removeChild(operand);\n        }\n        operand.getParent().removeChild(operand);\n        operand.setParent(this);\n        operand.setLeft(null);\n        operand.setRight(null);\n        this.setRightChild(operand);\n        if(rightOperandSibling) {\n            rightOperandSibling.setLeft(this);\n        }\n        this.setRight(rightOperandSibling);\n    }\n\n    transform() {\n        this.transformLeftOperand();\n        this.transformRightOperand();\n    }\n}","import GroupToken from \"./GroupToken\";\n\n\nexport default class OperatorToken extends GroupToken {\n    parse() {\n        this.parseLeft();\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class MultiplicationToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"*\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) * this.getRightChild().evaluate(declarations);\n    }\n}","import ValueToken from \"./ValueToken\";\nimport NumberToken from \"./NumberToken\";\nimport MultiplicationToken from \"./MultiplicationToken\";\n\n\nexport default class VariableToken extends ValueToken {\n\n    static isApplicable(character) {\n        return /^[a-z]$/i.test( character );\n    }\n\n    parse() {\n        while(true) {\n            const nextValue = this.getIterator().getNextValue();\n            if(/^[a-z0-9]$/i.test( nextValue )) {\n                this.getIterator().moveLeft();\n                this.setValue(this.getValue() + \"\" + nextValue);\n            } else {\n                break;\n            }\n        }\n        this.parseLeft();\n    }\n\n    transformAddMultiplicationOperator() {\n        const operand = this.getLeft();\n        if(operand && operand instanceof NumberToken) {\n            const multiplicationToken = new MultiplicationToken(this.getIterator());\n            operand.setRight(multiplicationToken);\n            multiplicationToken.setLeft(operand);\n            this.setLeft(multiplicationToken);\n            multiplicationToken.setRight(this);\n            multiplicationToken.setParent(this.getParent());\n            this.getParent().addChild(multiplicationToken);\n            multiplicationToken.setRoot(this.getRoot());\n        }\n    }\n\n    transform() {\n        this.transformAddMultiplicationOperator();\n    }\n\n    evaluate(declarations) {\n        const variableName = this.getValue();\n        if(!declarations || !(variableName in declarations)) {\n            throw SyntaxError(`Expected variable is not defined ${variableName}`);\n        }\n        const variable = declarations[variableName];\n        if(typeof variable === \"function\") {\n            return Number(variable());\n        }\n        return Number(variable);\n    }\n}","import GroupToken from \"./GroupToken\";\n\nexport default class BracketToken extends GroupToken {\n    static isApplicable(character) {\n        return character === \"(\";\n    }\n\n    isChildAllowed() {\n        return this.getIterator().getValue() !== \")\";\n    }\n\n    parse() {\n        const nextValue = this.getIterator().getNextValue();\n        if (nextValue === \")\") {\n            this.getIterator().moveNext();\n            this.parseLeft();\n        }\n        this.parseUp();\n        this.parseLeft();\n    }\n}\n","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\nimport NumberToken from \"./NumberToken\";\n\nexport default class LeftNotNullRightOperatorToken extends LeftRightOperatorToken {\n\n    getLeftOperand() {\n        const operand = this.getLeft();\n        if(!operand) {\n            const numberToken = new NumberToken(this.getIterator());\n            numberToken.setValue(0);\n            return numberToken;\n        }\n        return operand;\n    }\n}","import LeftNotNullRightOperatorToken from \"./LeftNotNullRightOperatorToken\";\n\nexport default class AdditionToken extends LeftNotNullRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"+\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) + this.getRightChild().evaluate(declarations);\n    }\n}","import LeftRightOperatorToken from \"./LeftRightOperatorToken\";\n\n\nexport default class DivisionToken extends LeftRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"/\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) / this.getRightChild().evaluate(declarations);\n    }\n}","import LeftNotNullRightOperatorToken from \"./LeftNotNullRightOperatorToken\";\n\n\nexport default class SubtractionToken extends LeftNotNullRightOperatorToken {\n    static isApplicable(character) {\n        return character === \"-\";\n    }\n\n    evaluate(declarations) {\n        return this.getLeftChild().evaluate(declarations) - this.getRightChild().evaluate(declarations);\n    }\n}","import CharacterAccessor from \"./CharacterAccessor\";\nimport BaseToken from \"./tokens/BaseToken\";\nimport RootToken from \"./tokens/RootToken\";\nimport NumberToken from \"./tokens/NumberToken\";\nimport VariableToken from \"./tokens/VariableToken\";\nimport BracketToken from \"./tokens/BracketToken\";\nimport AdditionToken from \"./tokens/AdditionToken\";\nimport DivisionToken from \"./tokens/DivisionToken\";\nimport MultiplicationToken from \"./tokens/MultiplicationToken\";\nimport SubtractionToken from \"./tokens/SubtractionToken\";\n\nBaseToken.registerTokenType(NumberToken);\nBaseToken.registerTokenType(VariableToken);\nBaseToken.registerTokenType(AdditionToken);\nBaseToken.registerTokenType(SubtractionToken);\nBaseToken.registerTokenType(DivisionToken);\nBaseToken.registerTokenType(MultiplicationToken);\nBaseToken.registerTokenType(BracketToken);\n\nexport default function lexer(stringExpression) {\n    const iterator = new CharacterAccessor(stringExpression);\n    iterator.removeCharacters(/\\s/g);\n    const rootToken = new RootToken(iterator);\n    rootToken.parse();\n    return rootToken;\n}\n","import lexer from \"./lexer\";\nimport transformer from \"./transformer\";\n\nexport default class EvalExp {\n    constructor(rawString) {\n        this.rawString = rawString;\n        this.rootToken = null;\n    }\n\n    parse() {\n        this.rootToken = lexer(this.rawString);\n        transformer(this.rootToken);\n    }\n\n    getParsedTree() {\n        this.parseIfNotParsed();\n        return this.rootToken;\n    }\n\n    evaluate(declarations = {}) {\n        this.parseIfNotParsed();\n        return this.rootToken.evaluate(declarations);\n    }\n\n    parseIfNotParsed() {\n        if(!this.rootToken) {\n            this.parse();\n        }\n    }\n}","import MultiplicationToken from \"./tokens/MultiplicationToken\";\nimport DivisionToken from \"./tokens/DivisionToken\";\nimport AdditionToken from \"./tokens/AdditionToken\";\nimport SubtractionToken from \"./tokens/SubtractionToken\";\nimport VariableToken from \"./tokens/VariableToken\";\n\nexport default function transformer(rootToken) {\n    const orderedOperatorTypes = [\n        VariableToken,\n        MultiplicationToken,\n        DivisionToken,\n        AdditionToken,\n        SubtractionToken\n    ];\n\n    const tokenList = rootToken.getGlobalList();\n    orderedOperatorTypes.forEach(operatorType => {\n        tokenList.forEach(token => {\n            if (token instanceof operatorType) {\n                token.transform();\n            }\n        });\n    });\n    return rootToken;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(901);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}